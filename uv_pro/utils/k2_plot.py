"""
Generate second-order rate constant plots.

Create and export a k2 plot quickly with custom plot titles and other settings.
The current working directory will be checked for valid fitting param .csv files to
create the second-order rate constant (k2) plot.

@author: David Hebert
"""

import os
import pandas as pd
import matplotlib.pyplot as plt
from matplotlib.figure import Figure
from scipy.stats import linregress
from uv_pro.utils.filepicker import FilePicker
from uv_pro.utils.printing import prompt_user
from uv_pro.io.export import export_figure


class K2Plot:
    """
    Contains methods for creating second-order (k2) rate constant plots.

    Attributes
    ----------
    path : str
        The current working directory.
    chosen_files : list[str]
        The list of selected fitting param files.
    name : str
        The filename of the exported plot.
    linear_fits : dict
        The fitting parameters for each wavelength. A nested dict with key(s) \
        ``wavelength``. The value of ``linear_fits[wavelength]`` is also a \
        dictionary, with keys ``slope``, ``slope err``, ``intercept``, \
        ``intercept err``, ``r2``.
    kobs_data : list[pandas.Series]
        The kobs data parsed from ``chosen_files``.
    """
    def __init__(self) -> None:
        self._print_logo()
        self.path = os.getcwd()
        self.main()

    def main(self) -> None:
        self.chosen_files = self._pick_files()

        if self.chosen_files:
            self.name = self._get_name()

        else:
            return

        self.kobs_data = self._parse_csv()

        if self.kobs_data:
            self.linear_fits = self._linear_regression()
            self.k2_plot()

        else:
            return

    def k2_plot(self, title: str | None = None, substrate: str | None = None) -> None:
        """
        Create a second-order (k2) rate constant plot figure.

        Parameters
        ----------
        title : str or None, optional
            The figure title. Default is None.
        substrate : str or None, optional
            The substrate name (for x-axis label). Default is None.
        """
        try:
            if title is None:
                title = self._get_plot_title()
            if substrate is None:
                substrate = self._get_substrate()

        except (EOFError, KeyboardInterrupt):
            return

        fig, axs = plt.subplots(
            nrows=1,
            ncols=len(self.kobs_data),
            figsize=(16, 4),
            layout='constrained',
            sharey=False
        )

        fig.suptitle(title, fontweight='bold')

        for i, series in enumerate(self.kobs_data):
            yvals = series
            xvals = series.index

            axs[i].scatter(xvals, yvals, c='red')

            m = self.linear_fits[series.name]['slope']
            b = self.linear_fits[series.name]['intercept']
            r2 = self.linear_fits[series.name]['r2']

            axs[i].plot(xvals, xvals * m + b, linestyle=':', c='black')

            axs[i].text(
                x=0.01,
                y=0.99,
                s=f'slope: {m:.3e}\nintercept: {b:.3e}\nr$^2$ = {r2:.3f}',
                verticalalignment='top',
                horizontalalignment='left',
                transform=axs[i].transAxes,
                color='0.4',
                fontsize='8'
            )

            axs[i].set_xlim(left=0)
            axs[i].set_ylim(bottom=0)
            axs[i].set(
                xlabel=f'[{substrate}] (M)',
                ylabel='k$_{obs}$ (s$^{-1}$)',
                title=f'{series.name} (nm)'
            )

        print('Close plot window to continue...', end='\n')
        plt.show()

        self._prompt_for_changes(fig, title, substrate)

    def export(self, fig: Figure) -> str:
        return export_figure(fig, self.path, self.name)

    def _pick_files(self) -> list[str] | None:
        """Pick multiple files from the terminal."""
        fp = FilePicker(root=self.path, file_ext='.csv')
        chosen_files = fp.pick_file(mode='multi', min_files=3)
        return chosen_files

    def _parse_csv(self) -> list[pd.Series]:
        """
        Parse .csv files for kobs data.

        Intended to be used with fitting param .csv files
        generated by uv_pro.

        Returns
        -------
        list[pandas.Series]
            The parsed kobs data for each wavelength. Each item list
            corresponds to a different wavelength. Wavelengths which
            have fewer than three data points are discarded.
        """
        series_list = []

        for file in self.chosen_files:
            try:
                if conc := self._prompt_for_conc(file):
                    series_list.append(
                        pd.read_csv(file, index_col=0)['kobs'].rename(conc)
                    )

                else:
                    break

            except KeyError:
                print(f'Error: cannot retrieve kobs values from {file}.')
                continue

        return self._handle_nan(series_list)

    def _linear_regression(self) -> dict:
        """
        Perform linear regression fitting on ``self.kobs_data``.

        Returns
        -------
        dict
            The fitting parameters for each wavelength. A nested dict with key(s) \
            ``wavelength``. The value of ``linear_fits[wavelength]`` is also a \
            dictionary, with keys ``slope``, ``slope err``, ``intercept``, \
            ``intercept err``, ``r2``.
        """
        linear_fits = {}
        for series in self.kobs_data:
            yvals = series
            xvals = series.index

            line_fit = linregress(xvals, yvals)

            linear_fits[series.name] = {
                'slope': line_fit.slope,
                'slope err': line_fit.stderr,
                'intercept': line_fit.intercept,
                'intercept err': line_fit.intercept_stderr,
                'r2': line_fit.rvalue
            }

        return linear_fits

    def _get_name(self) -> str:
        """Create filename, attempt to find a common prefix in ``self.chosen_files``."""
        common_prefix = os.path.commonprefix(
            [os.path.splitext(file)[0] for file in self.chosen_files]
        )
        suffix = 'k2 plot'

        if common_prefix.endswith(('_', '-')):
            common_prefix = common_prefix[:-1]

        if not common_prefix.endswith(' '):
            common_prefix += ' '

        return common_prefix + suffix

    def _get_plot_title(self) -> str:
        title = input('\nEnter plot title: ')
        return title

    def _get_substrate(self) -> str:
        substrate = input('\nEnter substrate name: ')
        return substrate if substrate else 'Sub'

    def _handle_nan(self, data: list[pd.Series]) -> list[pd.Series]:
        """Handle NaNs in ``data`` and discard wavelengths with fewer than 3 data points."""
        df = pd.DataFrame(data).dropna(axis='columns', thresh=3)
        df.sort_index(axis='columns', inplace=True)

        series_list = [
            df[col].dropna().sort_index() for col in df.columns
        ]

        return series_list

    def _prompt_for_conc(self, filename: str) -> float | None:
        """Prompt the user for a substrate concentration."""
        print(f'\n{filename}')

        try:
            conc = input('Enter substrate concentration (in M): ')
            return float(eval(conc))

        except (ValueError, NameError, SyntaxError):
            print('Invalid entry.')
            return

        except (EOFError, KeyboardInterrupt):
            return

    def _prompt_for_changes(self, fig: Figure, title: str, substrate: str) -> None:
        """
        Prompt the user for plot changes or export.

        Parameters
        ----------
        fig : Figure
            The current k2 plot figure.
        title : str
            The k2 plot title.
        substrate : str
            The name of the substrate (for x-axis labelling).
        """
        header = 'Make changes?'
        options = [
            {'key': '1', 'name': 'Save plot'},
            {'key': '2', 'name': 'Change title'},
            {'key': '3', 'name': 'Change x-axis label'}
        ]

        if user_choices := prompt_user(header=header, options=options):
            if '1' in user_choices:
                self.exported_figure = self.export(fig)
            if '2' in user_choices:
                self.k2_plot(substrate=substrate)
            if '3' in user_choices:
                self.k2_plot(title=title)

    def _print_logo(self) -> None:
        print('\n┏┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┓')
        print('┇ uv_pro k2 Plot ┇')
        print('┗┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┅┛')
        print('Enter ctrl-c to quit.\n')
